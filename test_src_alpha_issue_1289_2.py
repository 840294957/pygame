# run with `pytest -vv` to see difference between SDL1 blit and BLEND_SDL1_ALPHA

from pprint import pprint
import pygame


# Next step is to make a better test with edge cases for the blitter.
# "What SDL1 did". Needs to test at least [0,1, 65, 126, 127, 199, 254, 255]
# for (r,g,b,a) src and dest surfaces.

# This table was generated with SDL1 SDL blit.
results_expected = {
    ((0, 255, 255), (0, 255, 0)): (0, 255, 255, 255),
    ((0, 255, 255), (1, 254, 1)): (0, 255, 255, 255),
    ((0, 255, 255), (65, 199, 65)): (16, 255, 241, 255),
    ((0, 255, 255), (126, 127, 126)): (62, 255, 192, 255),
    ((0, 255, 255), (127, 126, 127)): (63, 255, 191, 255),
    ((0, 255, 255), (199, 65, 199)): (155, 255, 107, 255),
    ((0, 255, 255), (254, 1, 254)): (253, 255, 2, 255),
    ((0, 255, 255), (255, 0, 255)): (255, 255, 0, 255),
    ((1, 254, 254), (0, 255, 0)): (1, 255, 254, 254),
    ((1, 254, 254), (1, 254, 1)): (1, 255, 254, 255),
    ((1, 254, 254), (65, 199, 65)): (17, 255, 240, 255),
    ((1, 254, 254), (126, 127, 126)): (63, 255, 191, 255),
    ((1, 254, 254), (127, 126, 127)): (64, 255, 190, 255),
    ((1, 254, 254), (199, 65, 199)): (155, 255, 107, 255),
    ((1, 254, 254), (254, 1, 254)): (253, 255, 2, 255),
    ((1, 254, 254), (255, 0, 255)): (255, 255, 0, 255),
    ((65, 199, 199), (0, 255, 0)): (65, 255, 199, 199),
    ((65, 199, 199), (1, 254, 1)): (64, 255, 200, 200),
    ((65, 199, 199), (65, 199, 65)): (65, 255, 199, 214),
    ((65, 199, 199), (126, 127, 126)): (95, 255, 164, 227),
    ((65, 199, 199), (127, 126, 127)): (96, 255, 163, 227),
    ((65, 199, 199), (199, 65, 199)): (169, 255, 95, 243),
    ((65, 199, 199), (254, 1, 254)): (253, 255, 2, 255),
    ((65, 199, 199), (255, 0, 255)): (255, 255, 0, 255),
    ((126, 127, 127), (0, 255, 0)): (126, 255, 127, 127),
    ((126, 127, 127), (1, 254, 1)): (125, 255, 128, 128),
    ((126, 127, 127), (65, 199, 65)): (110, 255, 146, 160),
    ((126, 127, 127), (126, 127, 126)): (126, 255, 127, 191),
    ((126, 127, 127), (127, 126, 127)): (126, 255, 126, 191),
    ((126, 127, 127), (199, 65, 199)): (183, 255, 79, 227),
    ((126, 127, 127), (254, 1, 254)): (253, 255, 1, 255),
    ((126, 127, 127), (255, 0, 255)): (255, 255, 0, 255),
    ((127, 126, 126), (0, 255, 0)): (127, 255, 126, 126),
    ((127, 126, 126), (1, 254, 1)): (126, 255, 127, 127),
    ((127, 126, 126), (65, 199, 65)): (111, 255, 145, 159),
    ((127, 126, 126), (126, 127, 126)): (127, 255, 126, 190),
    ((127, 126, 126), (127, 126, 127)): (127, 255, 126, 191),
    ((127, 126, 126), (199, 65, 199)): (183, 255, 78, 227),
    ((127, 126, 126), (254, 1, 254)): (254, 255, 1, 255),
    ((127, 126, 126), (255, 0, 255)): (255, 255, 0, 255),
    ((199, 65, 65), (0, 255, 0)): (199, 255, 65, 65),
    ((199, 65, 65), (1, 254, 1)): (198, 255, 66, 66),
    ((199, 65, 65), (65, 199, 65)): (165, 255, 99, 114),
    ((199, 65, 65), (126, 127, 126)): (163, 255, 96, 159),
    ((199, 65, 65), (127, 126, 127)): (163, 255, 95, 160),
    ((199, 65, 65), (199, 65, 199)): (199, 255, 65, 214),
    ((199, 65, 65), (254, 1, 254)): (254, 255, 1, 255),
    ((199, 65, 65), (255, 0, 255)): (255, 255, 0, 255),
    ((254, 1, 1), (0, 255, 0)): (254, 255, 1, 1),
    ((254, 1, 1), (1, 254, 1)): (253, 255, 2, 2),
    ((254, 1, 1), (65, 199, 65)): (206, 255, 52, 66),
    ((254, 1, 1), (126, 127, 126)): (191, 255, 63, 127),
    ((254, 1, 1), (127, 126, 127)): (191, 255, 63, 128),
    ((254, 1, 1), (199, 65, 199)): (212, 255, 51, 200),
    ((254, 1, 1), (254, 1, 254)): (254, 255, 1, 255),
    ((254, 1, 1), (255, 0, 255)): (255, 255, 0, 255),
    ((255, 0, 0), (0, 255, 0)): (0, 255, 255, 0),
    ((255, 0, 0), (1, 254, 1)): (1, 255, 254, 1),
    ((255, 0, 0), (65, 199, 65)): (65, 255, 199, 65),
    ((255, 0, 0), (126, 127, 126)): (126, 255, 127, 126),
    ((255, 0, 0), (127, 126, 127)): (127, 255, 126, 127),
    ((255, 0, 0), (199, 65, 199)): (199, 255, 65, 199),
    ((255, 0, 0), (254, 1, 254)): (254, 255, 1, 254),
    ((255, 0, 0), (255, 0, 255)): (255, 255, 0, 255),
}

def print_table():

    nums = [0, 1, 65, 126, 127, 199, 254, 255]
    results = {}
    for dest_r, dest_b, dest_a in zip(nums, reversed(nums), reversed(nums)):
        for src_r, src_b, src_a in zip(nums, reversed(nums), nums):
            src_surf = pygame.Surface((66, 66), pygame.SRCALPHA, 32)
            src_surf.fill((src_r, 255, src_b, src_a))
            dest_surf = pygame.Surface((66, 66), pygame.SRCALPHA, 32)
            dest_surf.fill((dest_r, 255, dest_b, dest_a))

            dest_surf.blit(src_surf, (0, 0))
            key = ((dest_r, dest_b, dest_a), (src_r, src_b, src_a))
            results[key] = dest_surf.get_at((65, 33))

    print("(dest_r, dest_b, dest_a), (src_r, src_b, src_a): color")
    pprint(results)


def test_alpha_blit():

    nums = [0, 1, 65, 126, 127, 199, 254, 255]
    results = {}
    for dest_r, dest_b, dest_a in zip(nums, reversed(nums), reversed(nums)):
        for src_r, src_b, src_a in zip(nums, reversed(nums), nums):
            src_surf = pygame.Surface((66, 66), pygame.SRCALPHA, 32)
            src_surf.fill((src_r, 255, src_b, src_a))
            dest_surf = pygame.Surface((66, 66), pygame.SRCALPHA, 32)
            dest_surf.fill((dest_r, 255, dest_b, dest_a))

            dest_surf.blit(src_surf, (0, 0), special_flags=pygame.BLEND_SDL1_ALPHA)
            key = ((dest_r, dest_b, dest_a), (src_r, src_b, src_a))
            results[key] = dest_surf.get_at((65, 33))

    assert results == results_expected



if __name__ == "__main__":
    print_table()
    test_alpha_blit()
